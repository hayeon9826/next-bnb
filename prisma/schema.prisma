// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  refresh_token_expires_in    Int?
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


model User {
  id            String      @id @default(uuid())
  email         String?   @unique
  name          String?
  emailVerified DateTime?
  image         String?
  desc          String?
  phone         String?
  address       String?
  rooms         Room[]
  accounts      Account[]
  sessions      Session[]
  likes         Like[]
  comments      Comment[]
  bookings      Booking[]
  createdAt DateTime @default(now())
}

model Like {
  id        Int      @id @default(autoincrement())
  roomId   Int
  userId    String
  createdAt DateTime @default(now())
  room      Room    @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId, roomId])
}

model Comment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  roomId    Int
  userId    String
  body      String
  room      Room    @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId, roomId])
}

model Faq {
  id            Int      @id @default(autoincrement())
  title         String
  desc          String
}


model Room {
  id            Int    @id @default(autoincrement())
  images        String[]
  imageKeys     String[]
  title         String
  address       String
  lat           String
  lng           String
  category      String
  desc          String
  bedroomDesc   String?
  price         Int
  freeCancel    Boolean   @default(false)
  selfCheckIn   Boolean   @default(false)
  officeSpace   Boolean   @default(false)
  hasMountainView   Boolean   @default(false)
  hasShampoo        Boolean   @default(false)
  hasFreeLaundry    Boolean   @default(false)
  hasAirConditioner Boolean   @default(false)
  hasWifi           Boolean   @default(false)
  hasBarbeque       Boolean   @default(false)
  hasFreeParking    Boolean   @default(false)
  userId        String
  user          User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes         Like[]
  comments      Comment[]
  bookings      Booking[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
  @@index([userId])
}


model Booking {
  id            String      @id @default(uuid())
  roomId        Int
  userId        String
  checkIn       DateTime
  checkOut      DateTime  
  guestCount    Int
  totalAmount   Int
  totalDays     Int
  status        BookingStatus
  room          Room     @relation(fields: [roomId], references: [id])
  user          User     @relation(fields: [userId], references: [id])
  payments      Payment[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
}


enum BookingStatus {
  SUCCESS
  CANCEL
  FAILED
  PENDING
}

model Payment {
  id         String      @id @default(uuid())
  paymentKey String?      // 토스 페이먼츠에서 받은 고유한 결제키
  bookingId  String       // 해당 결제와 연관된 예약 ID
  amount     Int          // 결제 금액
  status     PaymentStatus // 결제 처리 상태
  type       PaymentType?  // 결제 타입 정보
  orderId    String       @unique // 주문한 결제를 식별하는 역할
  orderName  String?      // 주문명
  mId        String?      // 상점아이디(MID). 토스페이먼츠에서 발급
  method     String?      // 결제수단
  approvedAt String?      // 결제 승인이 일어난 날짜와 시간
  requestedAt String?     // 결제가 일어난 날짜와 시간 정보
  cardNumber String?      // 카드번호입니다. 번호의 일부는 마스킹
  cardType   String?      // 카드 종류: 신용, 체크, 기프트, 미확인 
  booking    Booking  @relation(fields: [bookingId], references: [id])
  receiptUrl String?      // 발행된 영수증 url 정보
  checkoutUrl String?     // 결제창 url 정보
  failureCode String?    // 오류 타입을 보여주는 에러 코드
  failureMessage String? // 에러 메시지
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
}

enum PaymentStatus {
  READY
  IN_PROGRESS
  WAITING_FOR_DEPOSIT
  DONE
  CANCELED
  PARTIAL_CANCELED
  ABORTED
  EXPIRED
}

enum PaymentType {
  NORMAL
  BILLING
  BRANDPAY
}

enum CardAcquireStatus {
  READY
  REQUESTED
  COMPLETED
  CANCEL_REQUESTED
  CANCELED
}